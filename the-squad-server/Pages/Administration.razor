@page "/administration"
@using Microsoft.AspNetCore.Identity
@using the_squad_server.Data
@using the_squad_server.Models
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject CreatorManager<Creator> _CreatorManager
@inject GameManager<Game> _GameManager
@inject StreamingServiceManager<StreamingService> _SSmanager
@inject ServerManager<Server> _ServerManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>Administration</h3>
<AuthorizeView>
    <Authorized>
        @if (@context.User.IsInRole(ADMINISTRATION_ROLE))
        {
            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>User Name</th>
                        <th>Email</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var user in ColUsers)
                    {
                        <tr>
                            <td>@user.Id.Substring(0, 5) ...</td>
                            <td>@user.UserName</td>
                            <td>@user.Email</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditUser(user))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>

            @if (ShowPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit User</h3>
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.Id</p>
                                }
                                @if (objUser.Id != "")
                                {
                                    <p>@objUser.UserName</p>
                                }
                                else
                                {
                                    <input class="form-control" type="text" placeholder="UserName" @bind="objUser.UserName" />
                                }
                                <input class="form-control" type="text" placeholder="Email" @bind="objUser.Email" />
                                <input class="form-control" type="password" placeholder="Password"
                                @bind="objUser.PasswordHash" />
                                <select class="form-control" @bind="@CurrentUserRole">
                                    @foreach (var option in ColRoles)
                                    {
                                        <option value="@option">
                                            @option.Name
                                        </option>
                                    }
                                </select>
                                <br /><br />
                                <button class="btn btn-primary" @onclick="SaveUser">
                                    Save
                                </button>
                                @if (objUser.Id != "")
                                {
                                    <button class="btn btn-danger" @onclick="DeleteUser">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            <button class="btn btn-success" @onclick="AddNewUser">Add User</button>

            <hr />

            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Role Name</th>
                        <th>Role Name Normalized</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var role in ColRoles)
                    {
                        <tr>
                            <td>@role.Id</td>
                            <td>@role.Name</td>
                            <td>@role.NormalizedName</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditRole(role))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <button class="btn btn-success" @onclick="SetRolePopup">Add Role</button>
            @if (RolePopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">New Role</h3>
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control" type="text" placeholder="Role Name" @bind="NewRoleName" />
                                <br /><br />
                                <button class="btn btn-primary" @onclick="AddNewRole">
                                    Save
                                </button>
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Game Name</th>
                        <th>Game Image</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var game in ColGames)
                    {
                        <tr>
                            <td>@game.Name</td>
                            <td>@game.ImageUrl</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditGame(game))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-grid gap-2">
                <button class="btn btn-success" @onclick="AddNewGame">Add Game</button>
                <button class="btn btn-success" @onclick="ShowCreatorGames">Show / Edit Creator Games</button>
            </div>
            @if (ShowGamePopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Game</h3>
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                @if (@objGame.Generic) {
                                    <p>GENERIC RECORD</p>
                                }
                                <input class="form-control mb-3" type="text" placeholder="Name" @bind="objGame.Name" />
                                <input class="form-control" type="text" placeholder="ImageUrl" @bind="objGame.ImageUrl" />
                                <br /><br />
                                <button class="btn btn-primary" @onclick="SaveGame">
                                    Save
                                </button>
                                @if (objGame.Active)
                                {  
                                    <button class="btn btn-danger" @onclick="DeleteGame">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <table class="table">
                <thead>
                    <tr>
                        <th>StreamingServiceId</th>
                        <th>Streaming Service Name</th>
                        <th>Game Image</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var ss in ColSS)
                    {
                        <tr>
                            <td>@ss.StreamingServiceId</td>
                            <td>@ss.Name</td>
                            <td>@ss.LogoUrl</td>
                            @if (ss.ServiceUrl != null)
                            {
                                <td>@ss.ServiceUrl</td>
                            }
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditSS(ss))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-grid gap-2">
                <button class="btn btn-success" @onclick="AddNewSS">Add StreamingService</button>
                <button class="btn btn-success" @onclick="ShowCreatorSS">Show / Edit Creator StreamingServices</button>
            </div>
            @if (ShowSSPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Streaming Service</h3>
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                @if (@objSS.Generic) {
                                    <p>GENERIC RECORD</p>
                                }
                                <input class="form-control mb-3" type="text" placeholder="Name" @bind="objSS.Name" />
                                <input class="form-control mb-3" type="text" placeholder="ImageUrl" @bind="objSS.LogoUrl" />
                                <input class="form-control mb-3" type="text" placeholder="ServiceUrl" @bind="objSS.ServiceUrl" />
                                <input class="form-control mb-3" type="text" placeholder="ServiceUrl" @bind="objSS.VideoUrl" />
                                <br /><br />
                                <button class="btn btn-primary" @onclick="SaveStreamingService">
                                    Save
                                </button>
                                @if (objSS.ServiceUrl != null && objSS.ServiceUrl != "")
                                {  
                                    <button class="btn btn-danger" @onclick="DeleteSS">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }

            <table class="table">
                <thead>
                    <tr>
                        <th>Id</th>
                        <th>Name</th>
                        <th>Status</th>
                        <th>ServerRoleNames</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var server in ColServers)
                    {
                        <tr>
                            <td>@server.Id</td>
                            <td>@server.Name</td>
                            <td>@server.Status</td>
                            <td>@server.ServerPicture</td>
                            <td>
                                <button class="btn btn-primary" @onclick="(() => EditServer(server))">
                                    Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="d-grid gap-2">
                <button class="btn btn-success" @onclick="AddNewServer">Add Server</button>
            </div>
            @if (ShowServerPopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Server</h3>
                                <button type="button" class="close" @onclick="ClosePopup">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control mb-3" type="text" placeholder="Id" @bind="objServer.Id" disabled/>
                                <input class="form-control mb-3" type="text" placeholder="Name" @bind="objServer.Name" />
                                <input class="form-control mb-3" type="text" placeholder="Picture" @bind="objServer.ServerPicture" />
                                <input class="form-control mb-3" type="text" placeholder="Status" @bind="objServer.Status" disabled/>
                                <table>
                                    @if (objServer.ServerRoleNames != null && objServer.ServerRoleNames.Count > 0)
                                    @foreach (var role in objServer.ServerRoleNames)
                                    {
                                        <tr>
                                            <td>@role.Name</td>
                                            <td>
                                                <button class="btm btn-success" @onclick="(() => EditServerRole(role))" >Edit</button>
                                            </td>
                                        </tr>
                                    }
                                </table>
                                <button class="btm btn-success" @onclick="AddServerRole">New Server Role</button>
                                <br /><br />
                                <button class="btn btn-primary" @onclick="SaveServer">
                                    Save
                                </button>
                                @if (objSS.ServiceUrl != null && objSS.ServiceUrl != "")
                                {  
                                    <button class="btn btn-danger" @onclick="DeleteServer">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }
            @if (ShowServerRolePopup)
            {
                <div class="modal" tabindex="-1" style="display:block" role="dialog">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h3 class="modal-title">Edit Server Roles</h3>
                                <button type="button" class="close" @onclick="ClosePopupSR">
                                    <span aria-hidden="true">X</span>
                                </button>
                            </div>
                            <div class="modal-body">
                                <input class="form-control mb-3" type="text" placeholder="Id" @bind="objServerRole.Id" disabled/>
                                <input class="form-control mb-3" type="text" placeholder="Name" @bind="objServerRole.Name" />
                                <input class="form-control mb-3" type="text" placeholder="MapName" @bind="objServerRole.MappedIdentityRole" />
                                <br /><br />
                                <button class="btn btn-primary" @onclick="SaveServerRole">
                                    Save
                                </button>
                                @if (objSS.ServiceUrl != null && objSS.ServiceUrl != "")
                                {  
                                    <button class="btn btn-danger" @onclick="DeleteServer">
                                        Delete
                                    </button>
                                }
                                <br />
                                <span style="color:red">@strError</span>
                            </div>
                        </div>
                    </div>
                </div>
            }


        }
        else
        {
            <p>You're not signed in as a user in @ADMINISTRATION_ROLE.</p>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    IdentityUser objUser = new IdentityUser();
    string CurrentUserRole { get; set; } = "Users";
    string NewRoleName { get; set; }

    Game objGame = new Game();
    StreamingService objSS = new StreamingService();

    Server objServer = new Server();
    ServerRole objServerRole = new ServerRole();
    List<Server> ColServers = new List<Server>();
    List<IdentityUser> ColUsers = new List<IdentityUser>();
    List<IdentityRole> ColRoles = new List<IdentityRole>();
    List<Game> ColGames = new List<Game>();
    List<StreamingService> ColSS = new List<StreamingService>();

    List<string> Options = new List<string>() { "Users", "Administrators" };
    
    string strError = "";
    bool ShowPopup = false;
    bool ShowGamePopup = false;
    bool ShowSSPopup = false;
    bool RolePopup = false;
    bool ShowServerPopup = false;
    bool ShowServerRolePopup = false;


    //
    // STARTUP
    //

    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    string ADMINISTRATION_ROLE = "Administrators";
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    protected override async Task OnInitializedAsync()
    {
        GetUsers();
        GetRoles();
        ColServers = _ServerManager.ListServers();
        ColGames = _GameManager.ListGames();
        ColSS = _SSmanager.ListStreamingServices();
        var RoleResult = await _RoleManager.FindByNameAsync(ADMINISTRATION_ROLE);
        if (RoleResult == null)
        {
            await _RoleManager.CreateAsync(new IdentityRole(ADMINISTRATION_ROLE));
        }
        var user = await _UserManager.FindByNameAsync("OneUp5hroom");
        if (user != null)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (!UserResult)
            {
                await _UserManager.AddToRoleAsync(user, ADMINISTRATION_ROLE);
            }
        }
        CurrentUser = (await authenticationStateTask).User;
    }

    //
    // Server CRUD
    //
    public void ClosePopupSR()
    {
        ShowServerRolePopup = false;
        ShowServerPopup = true;
    }
    public void AddNewServer()
    {
        objServer = new Server();
        ShowServerPopup = true;
    }
    async Task EditServer(Server _server)
    {
        objServer = _server;
        ShowServerPopup = true;
    }
    public void AddServerRole()
    {
        objServerRole = new ServerRole();
        ShowServerPopup = false;
        ShowServerRolePopup = true;
    }
    async Task EditServerRole(ServerRole _role)
    {
        objServerRole = _role;
        ShowServerPopup = false;
        ShowServerRolePopup = true;
    }
    async Task SaveServerRole()
    {
        ShowServerRolePopup = false;
        ServerRole existingRole = null!;
        if (objServer.ServerRoleNames != null && objServer.ServerRoleNames.Count > 0)
        {
            existingRole = objServer.ServerRoleNames.FirstOrDefault(r => r.Id == objServerRole.Id);
        }
        if (existingRole != null && existingRole.Id == objServerRole.Id)
        {
            existingRole.Name = objServerRole.Name;
            existingRole.MappedIdentityRole = objServerRole.MappedIdentityRole;
        }
        else
        {
            objServer.ServerRoleNames.Add(objServerRole);
        }
        ColServers = _ServerManager.ListServers();
        ShowServerPopup = true;
    }
    async Task SaveServer()
    {
        try
        {
            await _ServerManager.SetAsync(objServer);
            ShowServerPopup = false;
            await InvokeAsync(() => StateHasChanged());
            ColServers = _ServerManager.ListServers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task DeleteServer()
    {
        ShowServerPopup = false;
        var server = _ServerManager.GetServer(objServer);
        if (server != null)
        {
            await _ServerManager.DeleteAsync(objServer);
        }
        ColServers = _ServerManager.ListServers();
    }




    //
    // GAME CRUD
    //
    public void AddNewGame()
    {
        objGame = new Game();
        objGame.Generic = true;
        objGame.Active = false;
        ShowGamePopup = true;
    }
    public void ShowCreatorGames()
    {
        ColGames = _GameManager.ListGames(true);
    }
    async Task EditGame(Game _game)
    {
        objGame = _game;
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult = await _UserManager.IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        // Open the Popup
        ShowGamePopup = true;
    }
    async Task SaveGame()
    {
        try
        {
            objGame.CreatorAssignment = _CreatorManager.GetDefaultCreator();
            await _GameManager.SetAsync(objGame);
            // Close the Popup
            ShowGamePopup = false;
            // Refresh Users
            ColGames = _GameManager.ListGames();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task DeleteGame()
    {
        ShowGamePopup = false;
        var game = _GameManager.GetGame(objGame);
        if (game != null)
        {
            await _GameManager.DeleteAsync(objGame);
        }
        ColGames = _GameManager.ListGames();
    }

    //
    // Streaming Service CRUD
    //
    public void AddNewSS()
    {
        objSS = new StreamingService();
        objSS.Generic = true;
        ShowSSPopup = true;
    }
    public void ShowCreatorSS()
    {
        ColSS = _SSmanager.ListStreamingServices(true);
    }
    async Task EditSS(StreamingService _ss)
    {
        objSS = _ss;
        ShowSSPopup = true;
    }
    async Task SaveStreamingService()
    {
        try
        {
            objSS.CreatorAssignment = _CreatorManager.GetDefaultCreator();
            await _SSmanager.SetAsync(objSS);
            ShowSSPopup = false;
            ColSS = _SSmanager.ListStreamingServices();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task DeleteSS()
    {
        // Close the Popup
        ShowSSPopup = false;
        // Get the user
        var SS = _SSmanager.GetStreamingService(objSS);
        if (SS != null)
        {
            await _SSmanager.DeleteAsync(objSS);
        }
        ColSS = _SSmanager.ListStreamingServices();
    }

    //
    // User CRUD
    //
    void AddNewUser()
    {
        // Make new user
        objUser = new IdentityUser();
        objUser.PasswordHash = "*****";
        // Set Id to blank so we know it is a new record
        objUser.Id = "";
        // Open the Popup
        ShowPopup = true;
    }
    async Task SaveUser()
    {
        try
        {
            // Is this an existing user?
            if (objUser.Id != "")
            {
                // Get the user
                var user = await _UserManager.FindByIdAsync(objUser.Id);
                // Update Email
                user.Email = objUser.Email;
                // Update the user
                await _UserManager.UpdateAsync(user);
                // Only update password if the current value
                // is not the default value
                if (objUser.PasswordHash != "*****")
                {
                    var resetToken =
                    await _UserManager.GeneratePasswordResetTokenAsync(user);
                    var passworduser =
                    await _UserManager.ResetPasswordAsync(
                    user,
                    resetToken,
                    objUser.PasswordHash);
                    if (!passworduser.Succeeded)
                    {
                        if (passworduser.Errors.FirstOrDefault() != null)
                        {
                            strError =
                            passworduser
                            .Errors
                            .FirstOrDefault()
                            .Description;
                        }
                        else
                        {
                            strError = "Pasword error";
                        }
                        // Keep the popup opened
                        return;
                    }
                }
                // Handle Roles
                // Is user in administrator role?
                var UserResult =
                await _UserManager
                .IsInRoleAsync(user, ADMINISTRATION_ROLE);
                // Is Administrator role selected
                // but user is not an Administrator?
                if (
                (CurrentUserRole == ADMINISTRATION_ROLE)
                &
                (!UserResult))
                {
                    // Put admin in Administrator role
                    await _UserManager
                    .AddToRoleAsync(user, ADMINISTRATION_ROLE);
                }
                else
                {
                    // Is Administrator role not selected
                    // but user is an Administrator?
                    if ((CurrentUserRole != ADMINISTRATION_ROLE)
                    &
                    (UserResult))
                    {
                        // Remove user from Administrator role
                        await _UserManager
                        .RemoveFromRoleAsync(user, ADMINISTRATION_ROLE);
                    }
                }
            }
            else
            {
                // Insert new user
                var NewUser =
                new IdentityUser
                    {
                        UserName = objUser.UserName,
                        Email = objUser.Email
                    };
                var CreateResult =
                await _UserManager
                .CreateAsync(NewUser, objUser.PasswordHash);
                if (!CreateResult.Succeeded)
                {
                    if (CreateResult
                    .Errors
                    .FirstOrDefault() != null)
                    {
                        strError =
                        CreateResult
                        .Errors
                        .FirstOrDefault()
                        .Description;
                    }
                    else
                    {
                        strError = "Create error";
                    }
                    // Keep the popup opened
                    return;
                }
                else
                {
                    // Handle Roles
                    if (CurrentUserRole == ADMINISTRATION_ROLE)
                    {
                        // Put admin in Administrator role
                        await _UserManager
                        .AddToRoleAsync(NewUser, ADMINISTRATION_ROLE);
                    }
                }
            }
            // Close the Popup
            ShowPopup = false;
            // Refresh Users
            GetUsers();
        }
        catch (Exception ex)
        {
            strError = ex.GetBaseException().Message;
        }
    }
    async Task EditUser(IdentityUser _IdentityUser)
    {
        // Set the selected user
        // as the current user
        objUser = _IdentityUser;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Is user in administrator role?
            var UserResult =
            await _UserManager
            .IsInRoleAsync(user, ADMINISTRATION_ROLE);
            if (UserResult)
            {
                CurrentUserRole = ADMINISTRATION_ROLE;
            }
            else
            {
                CurrentUserRole = "Users";
            }
        }
        // Open the Popup
        ShowPopup = true;
    }
    async Task DeleteUser()
    {
        // Close the Popup
        ShowPopup = false;
        // Get the user
        var user = await _UserManager.FindByIdAsync(objUser.Id);
        if (user != null)
        {
            // Delete the user
            await _UserManager.DeleteAsync(user);
        }
        // Refresh Users
        GetUsers();
    }
    void ClosePopup()
    {
        // Close the Popup
        ShowPopup = false;
        RolePopup = false;
        ShowGamePopup = false;
        ShowSSPopup = false;
        ShowServerPopup = false;
        ShowServerRolePopup = false;
    }
    public void GetUsers()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColUsers = new List<IdentityUser>();
        // get users from _UserManager
        var user = _UserManager.Users.Select(x => new IdentityUser
            {
                Id = x.Id,
                UserName = x.UserName,
                Email = x.Email,
                PasswordHash = "*****"
            });
        foreach (var item in user)
        {
            ColUsers.Add(item);
        }
    }
    public void GetRoles()
    {
        // clear any error messages
        strError = "";
        // Collection to hold users
        ColRoles = new List<IdentityRole>();
        // get users from _RoleManager
        var role = _RoleManager.Roles.Select(x => new IdentityRole
            {
                Id = x.Id,
                Name = x.Name,
                NormalizedName = x.NormalizedName
            });
        foreach (var item in role)
        {
            ColRoles.Add(item);
        }
    }
    public void EditRole(IdentityRole _IdentityRole)
    {

    }
    void SetRolePopup()
    {
        RolePopup = true;
    }
    async Task AddNewRole()
    {
        if (NewRoleName != null)
        {
            try
            {
                await _RoleManager.CreateAsync(new IdentityRole(NewRoleName));
                GetRoles();
                ClosePopup();
            }
            catch (Exception ex)
            {
                strError = ex.GetBaseException().Message;
            }
        }
        else
        {
            strError = "Role Name cannot be Empty";
        }
    }
}