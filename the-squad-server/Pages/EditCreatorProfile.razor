@page "/edit-creator-profile"
@using Microsoft.AspNetCore.Identity;
@using the_squad_server.Data;
@using the_squad_server.Models;
@inject UserManager<IdentityUser> _UserManager;
@inject RoleManager<IdentityRole> _RoleManager;
@inject GameManager<Game> _GameManager
@inject CreatorManager<Creator> _CreatorManager;
@inject StreamingServiceManager<StreamingService> _SSmanager
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject NavigationManager _navigationManager;
<AuthorizeView Context="authContext">
    <Authorized>
        @if (CreatorModel != null)
        {
        <h3>Creator Profile</h3>
        <partial name="_StatusMessage" for="StatusMessage" />
        @if (isNew)
        {
            <p class="text-info">
                You do not have a Creator Profile set up for this site.
                Add one below!
            </p>
        } else
        {
            <p class="text-info">
                The badass <span class="text-danger">@user.UserName</span> hath graced us with their presence.
            </p>
        }
        <div class="row">
            <div class="col-md-8 pb-3">
                <a class="btn-close float-end" role="button" href="/" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-8">
                <EditForm Model="@CreatorModel" OnValidSubmit="@submit" Context="formContext">
                    <div class="form-floating mb-3">
                        <div class="input-group-text">
                            <InputCheckbox id="Active" class="form-check-input mt-0" aria-describedby="basic-addon3" @bind-Value="CreatorModel.Active" />
                            <span class="m-1 ms-2" id="basic-addon3">Activate Creator Profile</span>
                        </div>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText class="form-control" id="userName" placeholder="UserId"
                            @bind-Value="CreatorModel.UserName" disabled />
                        <label for="userName" class="form-label">GamerTag</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText id="profilepic" class="form-control"
                            placeholder="Please enter a URL to your profile picture" @bind-Value="CreatorModel.ProfilePictureUrl" />
                        <label for="profilepic" class="form-label">Profile Picture URL</label>
                    </div>
                    <div class="form-floating mb-3">
                        <InputText id="profileDescription" class="form-control"
                            placeholder="Please enter a URL to your profile picture" @bind-Value="CreatorModel.ProfileDescription" />
                        <label for="profilepic" class="form-label">profileDescription</label>
                    </div>
                    @if (ColSS != null && ColSS.Count > 0)
                    {
                        <div class="mb-3">
                            <label for="twurl" class="form-label">Supported Streaming Services</label>
                            @foreach (var ss in ColSS)
                            {
                                <div class="input-group mb-3">
                                    <div class="input-group-text">
                                        <span class="m-1 ms-2" id="basic-addon3">@ss.Name</span>
                                    </div>
                                    <InputText class="form-control" placeholder="Channel Url" @bind-Value="ss.ServiceUrl" />
                                    <InputText class="form-control" placeholder="Link a video" @bind-Value="ss.VideoUrl" />
                                </div>
                            }
                        </div>
                    }       
                    <label for="halo" class="form-label">Select the Games you stream / play.</label>
                    <div class="input-group mb-3">
                    @foreach (var game in ColGames)
                    {
                        <InputCheckbox class="form-check-input mt-0" aria-describedby="basic-addon3" @bind-Value="game.Active" />
                        <span class="m-1 ms-2" id="basic-addon3">@game.Name</span>
                    }
                    </div>
                    @if (isNew)
                    {
                        <button class="w-100 btn btn-lg btn-primary" type="submit">Sign Up as a Creator</button>
                    }
                    else
                    {
                        <div class="d-grid gap-2 d-md-block">
                            <button class="btn btn-primary" type="submit">Update Creator Profile</button>
                            <a class="btn btn-warning" role="button" href="/" >Cancel</a>
                            <button class="btn btn-danger" type="button" data-toggle="modal" @onclick="deleteWarning">DELETE Creator Profile</button>
                        </div>
                        @if (showWarning)
                        {
                            <div style="background-color: rgba(131, 130, 130, 0.5); position: absolute; top: 0; left: 0; width: 100%; height: 100%" tabindex="-1" />
                            <div class="modal" tabindex="-2" style="display:block" role="dialog" data-backdrop="static">
                                <div class="modal-dialog">
                                    <div class="modal-content">
                                        <div class="modal-header">
                                            <h3 class="modal-title">Are you sure?</h3>
                                            <button type="button" class="close"
                                                    @onclick="cancelDelete">
                                                <span aria-hidden="true">X</span>
                                            </button>
                                        </div>
                                        <div class="modal-body">
                                            <p>Are you sure you want to delete this Creator Profile?<br /> (this cannot be undone)</p>
                                            <div class="d-grid gap-2">
                                                <button class="btn btn-danger" type="button" @onclick="delete">YES (DELETE)</button>
                                                <button class="btn btn-success" type="button" @onclick="cancelDelete">NO</button>
                                                <button class="btn btn-info" type="button" @onclick="cancelDelete">MAYBE SO?!</button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </EditForm>
            </div>
        </div>
        }
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>
@code {

    private bool isNew { get; set; } = true;
    private IdentityUser user = new IdentityUser();
    private List<Game> ColGames = new List<Game>();
    private List<StreamingService> ColSS = new List<StreamingService>();
    private bool showWarning { get; set; } = false;
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    Creator? CreatorModel = new Creator();
    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        if (CurrentUser != null)
        {
            user = await _UserManager.GetUserAsync(CurrentUser);
            var allGames = _GameManager.ListGames();
            if (allGames != null && allGames.Count > 0)
            {
                foreach (var game in allGames)
                {
                    var gameInstance = new Game(game);
                    ColGames.Add(gameInstance);
                }
            }
            var allSS = _SSmanager.ListStreamingServices();
            if (allSS != null && allSS.Count > 0)
            {
                foreach (var ss in allSS)
                {
                    var SSinstance = new StreamingService(ss);
                    ColSS.Add(SSinstance);
                }
            }
        }
        if (user != null) {
            GetCreatorProfile();
        }
        await InvokeAsync(() => StateHasChanged());
    }




    private async Task submit()
    {
        foreach(var gameObj in ColGames) {
            if (gameObj.Active == true)
            {
                Game existingGame = new Game();
                if (CreatorModel.Games != null && CreatorModel.Games.Count > 0)
                {
                    existingGame = CreatorModel.Games.FirstOrDefault(g => g.Name == gameObj.Name);
                }
                if (existingGame != null && existingGame.GameId != 0)
                {
                    existingGame = gameObj;
                }
                else
                {
                    var newGame = new Game(gameObj.Name, gameObj.ImageUrl, gameObj.Active);
                    CreatorModel.Games.Add(newGame);
                }
            }
            else
            {
                Game existingGame = new Game();
                if (CreatorModel.Games != null && CreatorModel.Games.Count > 0)
                {
                    existingGame = CreatorModel.Games.FirstOrDefault(g => g.Name == gameObj.Name);
                }
                if (existingGame != null && existingGame.GameId != 0)
                {
                    CreatorModel.Games.Remove(existingGame);
                    await _GameManager.DeleteAsync(existingGame);
                }
            }
        }
        foreach(var ssObj in ColSS) {
            StreamingService existingSS = new StreamingService();
            if (ssObj.ServiceUrl != null && ssObj.ServiceUrl != "")
            {

                if (CreatorModel.StreamingServices != null && CreatorModel.StreamingServices.Count > 0)
                {
                    existingSS = CreatorModel.StreamingServices.FirstOrDefault(s => s.Name == ssObj.Name);
                }
                if (existingSS != null && existingSS.LogoUrl != null && existingSS.ServiceUrl != null)
                {
                    CreatorModel.StreamingServices.Remove(existingSS);
                    await _SSmanager.DeleteAsync(existingSS);
                    CreatorModel.StreamingServices.Add(ssObj);
                }
                else
                {
                    var newSS = new StreamingService(ssObj.Name, ssObj.LogoUrl, ssObj.VideoUrl, ssObj.ServiceUrl);
                    CreatorModel.StreamingServices.Add(newSS);
                }
            }
            else
            {
                if (CreatorModel.StreamingServices != null)
                {
                    existingSS = CreatorModel.StreamingServices.FirstOrDefault(s => s.Name == ssObj.Name);
                }
                if (existingSS != null && existingSS.StreamingServiceId != 0)
                {
                    CreatorModel.StreamingServices.Remove(existingSS);
                    await _SSmanager.DeleteAsync(existingSS);
                }
            }
        }
        if (CreatorModel != null) {
            if (isNew)
            {
                await _CreatorManager.SetCreator(CreatorModel);
            }
            else
            {
                await _CreatorManager.UpdateCreator(CreatorModel);
            }
            GetCreatorProfile();
        }
    }
    private async Task updateCreator() {
        if (CreatorModel != null) {
            await _CreatorManager.UpdateCreator(CreatorModel);
            GetCreatorProfile();
        }
    }
    private void cancelDelete()
    {
        showWarning = false;
    }
    private void deleteWarning()
    {
        showWarning = true;
    }
    private async Task delete()
    {
        
        if (CreatorModel != null) {
            await _CreatorManager.DeleteCreator(CreatorModel);
            _navigationManager.NavigateTo("/");
        }
    }
    private void GetCreatorProfile()
    {
        CreatorModel = _CreatorManager.GetCreator(user);
        if(CreatorModel == null)
        {
            CreatorModel = new Creator(user);
            isNew = true;
        } else {
            isNew = false;
            if (CreatorModel.Games != null && CreatorModel.Games.Count > 0)
            {
                foreach (var game in CreatorModel.Games)
                {
                    if (game.Active)
                    {
                        ColGames.Where(g => g.Name == game.Name).FirstOrDefault().Active = game.Active;
                    }
                }
            }
            if (CreatorModel.StreamingServices != null && CreatorModel.StreamingServices.Count > 0)
            {
                foreach (var ss in CreatorModel.StreamingServices)
                {
                    ColSS.Where(s => s.Name == ss.Name).FirstOrDefault().ServiceUrl = ss.ServiceUrl;
                    ColSS.Where(s => s.Name == ss.Name).FirstOrDefault().VideoUrl = ss.VideoUrl;
                }
            }
        }
    }
}