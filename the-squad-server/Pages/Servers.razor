@page "/servers"
@using Microsoft.AspNetCore.Identity
@using System.Text.Json
@using System.Text.Json.Serialization
@using the_squad_server.API
@using the_squad_server.Data
@using the_squad_server.Models
@inject UserManager<IdentityUser> _UserManager
@inject RoleManager<IdentityRole> _RoleManager
@inject ServerManager<Server> _ServerManager
@inject APIService<Server> _APIService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject ILogger<Servers> logger;

<h3>What Server Do You Want To Play On?</h3>
<br /><br /><br />

<AuthorizeView>
    <Authorized>
        <div class="container">
            <div class="row">


                @foreach (var server in ColServers)
                {
                    <div class="col">
                        <div class="card" style="width: 25rem;">
                            <div class="card-header text-center bg-primary bg-gradient text-light">
                                @server.Name
                            </div>
                            <img class="card-img-top"
                                style="margin-top: 15px;margin-bottom: 15px; margin-left: auto; margin-right: auto; width: 23rem; "
                                src="@server.ServerPicture" alt="@server.Name Image">
                            <ul class="list-group list-group-flush">
                                <li class="list-group-item">Server Defaults to Offline after 30min of no activity</li>
                                <li class="list-group-item">Server Will automatically backup after each play session if at
                                    least one player connected for more than 5 minutes.</li>
                            </ul>
                            <div class="card-body">
                                <table class="table" style="width: 15em;">
                                    <tr>
                                        <td>Server Status: @server.Status</td>
                                        <td>
                                            @if (server.Status == ServerStatus.Online)
                                            {
                                                <div style="width:25px;height:25px;background-color:green;" />
                                            }
                                            else
                                            {
                                                <div style="width:25px;height:25px;background-color:grey;" />
                                            }
                                        </td>
                                    </tr>
                                </table>

                                @if (server.Status != null && server.Status != ServerStatus.Online && server.Status != ServerStatus.Unknown)
                                {
                                    <button type="button" @onclick=@(() => startServer(new Server()))
                                        class="btn btn-sm btn-primary">Start Server</button>
                                }
                                else
                                {
                                    <button type="button" class="btn btn-sm btn-secondary" disabled>Start Server</button>
                                }
                                <span style="width:10px;" />
                                <button type="button" class="btn btn-sm btn-primary" @onclick="(() => serverOnline(server))">Check Server
                                    Status</button>
                            </div>
                            @if (@server.Status == ServerStatus.Online)
                            {
                                <div class="card-footer text-muted">
                                    @if (@server.ServerDNSAddress != null && @server.ServerDNSAddress != "")
                                    {
                                        <span><b>Address:</b> @server.ServerDNSAddress</span>
                                        <br />
                                    }
                                    @if (server.ServerConnectionPort != null && server.ServerConnectionPort > 0)
                                    {
                                        <span><b>Port:</b> @server.ServerConnectionPort</span>
                                        <br />
                                    }
                                    @if (server.ServerConnectionPassword != null && server.ServerConnectionPassword != "")
                                    {
                                        <span><b>Game Password:</b> @server.ServerConnectionPassword</span>
                                        <br />
                                    }
                                    @if (server.ServerInstructions != null && server.ServerInstructions != "")
                                    {
                                        <h6><b>Instructions:</b></h6>
                                        <pre>@server.ServerInstructions</pre>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <p>You're not loggged in.</p>
    </NotAuthorized>
</AuthorizeView>


@code {
    private IdentityUser user = new IdentityUser();
    private List<Server> ColServers = new List<Server>();
    bool serverUp = false;
    string statusText = "unknown";
    [CascadingParameter]
    private Task<AuthenticationState>? authenticationStateTask { get; set; }
    System.Security.Claims.ClaimsPrincipal CurrentUser;
    Creator? CreatorModel = new Creator();

    Random randomGenerator = new Random();
    async Task startServer(Server _server)
    {
        bool _valid = false;
        user = await _UserManager.GetUserAsync(CurrentUser);
        foreach (var role in _server.ServerRoleNames)
        {
            var UserResult = await _UserManager.IsInRoleAsync(user, role.Name);
            if (UserResult)
            {
                logger.LogInformation(string.Format(
                    "{0} - UserId: {1} UserName: {2}; Is in approved role: {3}; Requested start server {4}:{5};",
                    DateTime.UtcNow.ToString("o", System.Globalization.CultureInfo.InvariantCulture),
                    user.Id,
                    user.UserName,
                    role,
                    _server.Name,
                    _server.Id
                ));
                _valid = true;
                break;
            }
        }
        if (_valid)
        {
            await _APIService.PostServerActionAsync(_server);
        }
        
    }
    async Task serverOnline(Server _server)
    {
        await Task.Delay(10);
        _server.Status = ServerStatus.Online;
    }

    async Task listAvailableServers()
    {
        var roles = _ServerManager.ListServerRoles();
        if (roles != null && roles.Count > 0)
        {
            List<string> roleList = new List<string>();
            user = await _UserManager.GetUserAsync(CurrentUser);
            foreach (var role in roles)
            {
                if(!roleList.Contains(role.Name))
                {
                    var UserResult = await _UserManager.IsInRoleAsync(user, role.Name);
                    if (UserResult)
                    {
                        roleList.Add(role.Name);
                    }
                }

            }
            ColServers = _ServerManager.ListServersbyRole(roleList);
        }
    }

    protected override async Task OnInitializedAsync()
    {
        CurrentUser = (await authenticationStateTask).User;
        await listAvailableServers();
        foreach(var serv in ColServers)
        {
            serv.Status = ServerStatus.Unknown;
        }
    }
}